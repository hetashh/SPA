// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SPA.Data;

#nullable disable

namespace SPA.Migrations
{
    [DbContext(typeof(SpaContext))]
    [Migration("20240602100316_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SPA.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookingTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcedureId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookingTime = new DateTime(2024, 6, 1, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            ProcedureId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookingTime = new DateTime(2024, 6, 2, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            ProcedureId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookingTime = new DateTime(2024, 6, 3, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            ProcedureId = 3,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("SPA.Models.Procedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Procedures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Расслабляющий массаж всего тела",
                            Name = "Шведский массаж",
                            Price = 75m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Лечебный массаж горячими камнями",
                            Name = "Массаж горячими камнями",
                            Price = 100m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Успокаивающий массаж с эфирными маслами",
                            Name = "Ароматерапия",
                            Price = 80m
                        });
                });

            modelBuilder.Entity("SPA.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 1000m,
                            Password = "password123",
                            Role = "User",
                            UserName = "john_doe"
                        },
                        new
                        {
                            Id = 2,
                            Balance = 1000m,
                            Password = "password456",
                            Role = "User",
                            UserName = "jane_smith"
                        },
                        new
                        {
                            Id = 3,
                            Balance = 1000m,
                            Password = "admin123",
                            Role = "Admin",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("SPA.Models.Booking", b =>
                {
                    b.HasOne("SPA.Models.Procedure", "Procedure")
                        .WithMany()
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SPA.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procedure");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
